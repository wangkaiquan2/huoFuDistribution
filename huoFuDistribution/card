流程：
    订单流程：登录 - 查询订单 - 查询详情 - 更新壮态 - 退出
    管理流程：登录 - 新增用户 - 用户管理 - 退出
    财务模块：不做
    数据对接：新增订单

功能：
    新增用户 - 壮态、权限管理 - 新增订单 - 查询订单 - 筛选 - 排序 - 修改订单详情 - 壮态修改 - 退出功能

数据库：
    企业表：id 公司名称(company) 企业编号(company_number)
    用户表：id 用户名(user_name) 密码(password) 是否启用(is_active) 所属公司(company_user) 创建时间(ctime)
        最后一次登录时间(ltime) 权限(多对多)
    权限表：id 权限名称(limit_name) 权限标识(limits)
    用户权限表：
    订单表：id 公司选择(c_company) 用户(user) 主单号(p_order) 订单号(order_number) 发货人(shipper) 数量(quantity)
        重量(weight) 体积(volume) 城市(city) 地址(address) 壮态(condition) 创建时间(ctime) 备注(remarks)
        收货人(consignee) 收货人联系方式(tel)
    壮态表:id 壮态名(condition) 壮态标识(condition_name)
    订单壮态表
    未接单 0
    已接单 1
    未提到 2
    拒单 3
    已安排 4
    已签收 5
    拒收 6
    无人收货 7


分页
随机产生订单号
权限验证
外键在引用时使用的字段名需加_id
多对多外键的增加(add),移除(remove)
模型层使用DateTimeField等自动生成时间的字段产生本地时间:需要把settings内USE_TZ 设置为 False
响应json格式数据对象需要自行序列化

向数据库内批量写入数据：
    new_companys = []
    new_companys.append(models.Company(cname=cname,number=number))
    models.Company.objects.bulk_create(new_companys)
字段关键字包含筛选：
    __contains
    companys = companys.filter(cname__contains=request.GET['cname'])
表与表多对多关系批量添加数据：
    request.POST.getlist('limits')
    .add(*list)
    批量删除数据：
    request.POST.getlist('limits')
    .remove(*list)
登陆时将用户id,uname,limits均写入session内:
    request.session['id'] = user[0].id
退出登陆要删除session内用户相关信息:
    del request.session['id']
获取当前日期时间
    now = datetime.datetime.now()
获取当日0点
    zeroToday = now - datetime.timedelta(hours=now.hour, minutes=now.minute, seconds=now.second,
                                         microseconds=now.microsecond)
获取当日最后一秒
    lastToday = zeroToday + datetime.timedelta(hours=23, minutes=59, seconds=59)
判断一条数据在数据库内是否存在:exists()
    models.Order_State.objects.filter(order_id=order).exists()
数据库查询时,一定要避免全部数据量的查询,使用默认筛选条件(日期，壮态等)
查询几乎都要使用分页